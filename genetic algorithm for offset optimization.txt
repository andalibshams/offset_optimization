### Genetic Algorithm

def fitness_function(pop):
    fitness = np.zeros(len(pop))
    
    for i in range(len(pop)):
        fitness[i] = performance(pop[i, :], method_to_use)
        
    return fitness

def select_mating_pool(pop, fitness, num_parents):
    # Selecting the best individuals in the current generation as parents for producing the offspring of the next generation.
    parents = np.empty((num_parents, pop.shape[1]))
    for parent_num in range(num_parents):
        max_fitness_idx = np.argmax(fitness)
        parents[parent_num, :] = pop[max_fitness_idx, :]
        fitness[max_fitness_idx] = -1e10
        
    return parents

def crossover(parents, offspring_size):
    offspring = np.empty(offspring_size)
    # The point at which crossover takes place between two parents. Usually it is at the center.
    crossover_point = np.uint8(offspring_size[1]/2)

    for k in range(offspring_size[0]):
        # Index of the first parent to mate.
        parent1_idx = k%parents.shape[0]
        # Index of the second parent to mate.
        parent2_idx = (k+1)%parents.shape[0]
        # The new offspring will have its first half of its genes taken from the first parent.
        offspring[k, 0:crossover_point] = parents[parent1_idx, 0:crossover_point]
        # The new offspring will have its second half of its genes taken from the second parent.
        offspring[k, crossover_point:] = parents[parent2_idx, crossover_point:]
    return offspring

def mutation(offspring_crossover):
    # Mutation changes a single gene in each offspring randomly.
    
    for idx in range(offspring_crossover.shape[0]):
        # The random value to be added to the gene.
        random_value = np.random.randint(0,cycle_length, 1)
        intersection_ = np.random.randint(0,number_of_intersection)
        
        offspring_crossover[idx, intersection_] = np.mod(offspring_crossover[idx, intersection_] + random_value, cycle_length)

    return offspring_crossover

def genetic_algorithm(offset, method_to_use, population_size, num_generations):
    ### Algorithm parameters
    np.random.seed(1234)
    num_parents_mating = number_of_intersection//2

    population = np.random.randint(0,cycle_length, size = (population_size, number_of_intersection))
    offspring_size =(population_size-num_parents_mating, number_of_intersection)


    for generation in range(num_generations):
        fitness = fitness_function(population)

        parents = select_mating_pool(population, fitness, num_parents_mating)

        offspring_crossover = crossover(parents,offspring_size)

        offspring_mutation = mutation(offspring_crossover)# Creating the new population based on the parents and offspring.

        population[0:parents.shape[0], :] = parents
        population[parents.shape[0]:, :] = offspring_mutation


    fitness = fitness_function(population)
    max_fitness_idx = np.argmax(fitness)

    offset = population[max_fitness_idx]